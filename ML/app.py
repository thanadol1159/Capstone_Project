# from flask import Flask, request, jsonify
# import pandas as pd
# import joblib
# import os
# import subprocess

# app = Flask(__name__)

# # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô test.py ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
# # TEST_SCRIPT_PATH = "test.py"

# # print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô test.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå .pkl ...")
# # try:
# #     subprocess.run(["python", TEST_SCRIPT_PATH], check=True)
# #     print("‚úÖ test.py ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
# # except subprocess.CalledProcessError as e:
# #     print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô test.py: {e}")
# #     exit(1) 

# # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
# MODEL_PATH = "models/popular_venue_model.pkl"
# VECTORIZER_PATH = "models/vectorizer.pkl"
# COSINE_SIM_PATH = "models/cosine_sim.pkl"
# DATA_PATH = "models/data.pkl"
# USER_CSV_PATH = "data/user.csv"
# VENUE_CSV_PATH = "data/venue_data.csv"

# for path in [MODEL_PATH, VECTORIZER_PATH, COSINE_SIM_PATH, DATA_PATH, USER_CSV_PATH, VENUE_CSV_PATH]:
#     if not os.path.exists(path):
#         raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {path}")

# # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏•‡∏±‡∏Å (‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
# model = joblib.load(MODEL_PATH)
# vectorizer = joblib.load(VECTORIZER_PATH)
# cosine_sim = joblib.load(COSINE_SIM_PATH)

# @app.route("/predict", methods=["GET"])
# def predict():
#     TEST_SCRIPT_PATH = "test.py"

#     print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô test.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ü‡∏•‡πå .pkl ...")
#     try:
#         subprocess.run(["python", TEST_SCRIPT_PATH], check=True)
#         print("‚úÖ test.py ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
#     except subprocess.CalledProcessError as e:
#         print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô test.py: {e}")

#     """‡πÇ‡∏´‡∏•‡∏î data.pkl ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ"""
#     df = joblib.load(DATA_PATH)
#     model = joblib.load(MODEL_PATH)
#     vectorizer = joblib.load(VECTORIZER_PATH)
#     cosine_sim = joblib.load(COSINE_SIM_PATH)
#     venues_df = pd.read_csv(VENUE_CSV_PATH)
#     users_df = pd.read_csv(USER_CSV_PATH)

#     categories = ['staycation', 'wedding', 'party', 'workshop', 'co-working space', 'film', 'private party']
#     results = []

#     for category_name in categories:
#         if category_name not in df["category"].values:
#             results.append({"category": category_name, "error": f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category_name}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"})
#             continue

#         category_encoded = df[df['category'] == category_name].index[0]
#         bookings = df[df['category'] == category_name]['bookings'].values[0]

#         test_data = pd.DataFrame({"category_encoded": [category_encoded], "bookings": [bookings]})
#         prediction = model.predict(test_data)[0]

#         results.append({
#             "category": category_name,
#             "popular": bool(prediction)
#         })

#     return jsonify({"results" : results})


# if __name__ == "__main__":
#     app.run(host="0.0.0.0", port=5000, debug=True)
from flask import Flask, request, jsonify
import pandas as pd
import joblib
import tensorflow as tf
import os
from sklearn.preprocessing import LabelEncoder

app = Flask(__name__)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå
CSV_PATH = "/app/data/newvenue.csv"
MODEL_PATH = "models/popular_venue_model.pkl"
DATA_PATH = "models/data.pkl"
TF_MODEL_PATH = "models/tf_model.h5"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å CSV ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
def load_data():
    if not os.path.exists(CSV_PATH):
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {CSV_PATH}")

    df = pd.read_csv(CSV_PATH)

    required_columns = {'category', 'bookings'}
    if not required_columns.issubset(df.columns):
        raise ValueError(f"CSV ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {required_columns} ‡πÅ‡∏ï‡πà‡∏û‡∏ö {set(df.columns)}")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå pickle
    os.makedirs("models", exist_ok=True)
    joblib.dump(df, DATA_PATH)

    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
def load_models():
    if not os.path.exists(MODEL_PATH):
        raise FileNotFoundError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• {MODEL_PATH}")

    model = joblib.load(MODEL_PATH)

    # ‡πÇ‡∏´‡∏•‡∏î TensorFlow Model ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    tf_model = None
    if os.path.exists(TF_MODEL_PATH):
        tf_model = tf.keras.models.load_model(TF_MODEL_PATH)

    return model, tf_model

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
model, tf_model = load_models()

@app.route("/predict", methods=["GET"])
def predict():
    """‡πÇ‡∏´‡∏•‡∏î CSV ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    df = load_data()

    # ‡πÇ‡∏´‡∏•‡∏î LabelEncoder ‡πÉ‡∏´‡∏°‡πà
    encoder = LabelEncoder()
    encoder.fit(df["category"])

    categories = request.args.get("categories", "").split(",")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if not categories or categories[0] == "":
        categories = df["category"].unique().tolist()

    results = []
    for category_name in categories:
        if category_name not in df["category"].values:
            results.append({"category": category_name, "error": f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{category_name}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"})
            continue

        avg_bookings = df[df["category"] == category_name]["bookings"].mean()
        category_encoded = encoder.transform([category_name])[0]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        test_data = pd.DataFrame({"category_encoded": [category_encoded], "bookings": [avg_bookings]})

        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        prediction = model.predict(test_data)[0]

        results.append({
            "category": category_name,
            "popular": bool(prediction)
        })

    return jsonify({"results": results})

@app.route("/recommend_all", methods=["GET"])
def recommend_all():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    df = load_data()

    encoder = LabelEncoder()
    encoder.fit(df["category"])

    results = []
    for category_name in df["category"].unique():
        avg_bookings = df[df["category"] == category_name]["bookings"].mean()
        category_encoded = encoder.transform([category_name])[0]

        test_data = pd.DataFrame({"category_encoded": [category_encoded], "bookings": [avg_bookings]})

        prediction = model.predict(test_data)

        results.append({
            "category": category_name,
            "is_popular": bool(prediction[0] == 1)
        })

    return jsonify({"results": results})

if __name__ == "__main__":
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô API server...")
    app.run(host="0.0.0.0", port=5000, debug=True)
