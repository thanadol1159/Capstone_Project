services:
  traefik:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./config.yml:/etc/traefik/config.yml:ro
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=dashboard"

  db:
    container_name: db
    image: postgres:15.5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dbpass
    ports:
      - "5173:5432"
    networks:
      - my_network
    volumes:
      - db:/var/lib/postgresql/data/

  django:
    container_name: django
    build:
      context: backend
      dockerfile: Dockerfile.Dev
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    user: "1000:1000"
    depends_on:
      - db
    networks:
      - my_network
    environment:
      SQL_ENGINE: django.db.backends.postgresql
      SQL_DATABASE: postgres
      SQL_USER: root
      SQL_PASSWORD: dbpass
      SQL_HOST: db
      SQL_PORT: 5432
      DATABASE: postgres
    command: "python manage.py runserver 0.0.0.0:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=PathPrefix(`/api`)"
      - "traefik.http.services.django.loadbalancer.server.port=8080"

  next:
    container_name: next
    build:
      context: ./Front-end/venue-rental
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - django
    networks:
      - my_network
    labels:
      - "traefik.enable=true"
      # Private domain route
      - "traefik.http.routers.next-private.rule=Host(`cp24nk1.sit.kmutt.ac.th`)"
      - "traefik.http.routers.next-private.service=next"
      # Public domain route
      - "traefik.http.routers.next-public.rule=Host(`capstone24.sit.kmutt.ac.th`)"
      - "traefik.http.routers.next-public.service=next"
      # Service configuration
      - "traefik.http.services.next.loadbalancer.server.port=3000"
      # Middleware to handle base path
      - "traefik.http.middlewares.next-prefix.stripprefix.prefixes=/nk1"
      - "traefik.http.middlewares.next-prefix.stripprefix.forceSlash=false"
      # Apply middleware to both routes
      - "traefik.http.routers.next-private.middlewares=next-prefix@docker"
      - "traefik.http.routers.next-public.middlewares=next-prefix@docker"

  adminer:
    container_name: adminer
    image: adminer
    networks:
      - my_network
    ports:
      - 8900:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=PathPrefix(`/adminer`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

networks:
  my_network:
    driver: bridge

volumes:
  db:
    driver: local
